#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('home-sensei:server');
var http = require('http');
const https = require('https');
const fs = require('fs');

//const configPath = './server.cfg';
//const config = JSON.parse(fs.readFileSync(configPath, 'UTF-8'));

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
const host = '0.0.0.0';
app.set('port', port);

/**
 * Create HTTP server.
 */
var options = null;
// if (fs.existsSync(process.env.KEY_PATH)) {
//   console.log("Strting as HTTPS.");
//   options = {
//     key: fs.readFileSync(process.env.KEY_PATH, 'utf8'),
//     cert: fs.readFileSync(process.env.CERT_PATH, 'utf8'),
//     ca: fs.readFileSync(process.env.CA_PATH, 'utf8')
//   };
// } else {
//   console.log("Strting as HTTPS.");
// }

var server = http.createServer(app);
//const serverSSL = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

// serverSSL.listen(444);
// serverSSL.on('error', onError);
// serverSSL.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
